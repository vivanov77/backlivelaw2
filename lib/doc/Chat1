h2. *Случай 1. Клиент-гость (незарегистрированный), хочет початиться с юристом.*

1. Юрист заходит на сайт и залогинивается на сайте под собой (вручную или автоматически через куки).

2. (Опционально) юрист получает список своих старых чат-сообщений:

Варианты:

<pre><code class="ruby">
GET http://localhost:3000/api/chat_messages

GET http://localhost:3000/api/chat_messages?correspondent_type=user&correspondent_id=3

Корреспондент - гость, указываем id GuestChatToken гостя:
GET http://localhost:3000/api/chat_messages?correspondent_type=guest&correspondent_id=3
</code></pre>

Заголовки (в любом случае):
<pre><code class="ruby">
access-token: vgEiTjHgSVRyrxSot-P8tQ
client: XQW5Rqisvsn7S1yphgVSjw
uid: lawyer1@example.com
</code></pre>

Ответ (на 3 вариант):

<pre><code class="ruby">
[
  {
    "id": 5,
    "sendable_type": "user",
    "sendable_id": 4,
    "receivable_type": "guest_chat_token",
    "receivable_id": 3,
    "text": "hi from user",
    "created_at": "2017-05-02T07:40:11.719Z",
    "updated_at": "2017-05-02T07:40:11.719Z"
  },
  {
    "id": 7,
    "sendable_type": "user",
    "sendable_id": 4,
    "receivable_type": "guest_chat_token",
    "receivable_id": 3,
    "text": "hi from user",
    "created_at": "2017-05-03T12:04:55.434Z",
    "updated_at": "2017-05-03T12:04:55.434Z"
  }
]
</code></pre>

3. Юрист подключается к сокету:

<pre>
ws://localhost:3000/cable/?access-token=vgEiTjHgSVRyrxSot-P8tQ&client=XQW5Rqisvsn7S1yphgVSjw&uid=lawyer1@example.com
</code></pre>

4. Юрист подписывается (фронтэнд) на "публичный" (т.е. видимый всем) канал чат-запросов, параметризованный по емейлу юриста (ChatChannel#Jurist), с которым гость хочет поговорить:

<pre><code class="ruby">
{"command":"subscribe","identifier":"{\"channel\":\"ChatChannel\",\"answerer_id\":\"4\"}"}
</code></pre>

Ответ:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"answerer_id\":\"4\"}","type":"confirm_subscription"}
</code></pre>

5. Гость заходит на сайт. Если он хочет пообщаться в чате (с юристом; это имеет смысл делать, только если нужный юрист находится онлайн - что проверяется либо соответствующим HTTP-запросом, либо через AppearanceChannel), то он выполняет следующие действия и именно в такой последовательности:

6. Гость получает гостевой чат-токен (через HTTP-запрос серверу) (только если у него нет гостевого чат-токена, сохранённого ранее), включающий в себя гость-чат-логин и гость-чат-пароль:

<pre><code class="ruby">
POST http://localhost:3000/api/guest_chat_tokens
</code></pre>

Ответ:

<pre><code class="ruby">
{
  "id": 2,
  "guest_chat_login": "75dNkYgRShvD72XYD98dg1Jb",
  "guest_chat_password": "bwZeigeZrNwHExXas6yUka1N",
  "created_at": "2017-04-27T09:38:27.169Z",
  "updated_at": "2017-04-27T09:38:27.169Z"
}
</code></pre>

Гость должен сохранить у себя (фронтэнд) полученные гость-чат-логин и гость-чат-пароль (то ли в куках, то ли в ангуляровской службе, то ли
ещё где-то), чтобы иметь возможность пользоваться ими на протяжении всего периода чат-общения. Сервер же записывает гостевой чат-токен в таблицу БД GuestChatToken (при выполнении данного HTTP-запроса).

7. (Опционально) Гость получает список своих старых чат-сообщений:

<pre><code class="ruby">
GET http://localhost:3000/api/chat_messages?guest_chat_password=bwZeigeZrNwHExXas6yUka1N

GET http://localhost:3000/api/chat_messages?guest_chat_password=bwZeigeZrNwHExXas6yUka1N&correspondent_id=4
</code></pre>

Ответ:

<pre><code class="ruby">
[
  {
    "id": 4,
    "sendable_type": "guest_chat_token",
    "sendable_id": 3,
    "receivable_type": "user",
    "receivable_id": 4,
    "text": "hi from guest",
    "created_at": "2017-05-02T07:39:12.109Z",
    "updated_at": "2017-05-02T07:39:12.109Z"
  },
  {
    "id": 6,
    "sendable_type": "guest_chat_token",
    "sendable_id": 3,
    "receivable_type": "user",
    "receivable_id": 4,
    "text": "hi from guest",
    "created_at": "2017-05-03T12:04:13.463Z",
    "updated_at": "2017-05-03T12:04:13.463Z"
  }
]
</code></pre>

8. Гость получает секретный (параметризованный) чат-токен (через HTTP-запрос серверу), обязательно указывая желаемого чат-собеседника:

<pre><code class="ruby">
POST http://localhost:3000/api/secret_chat_tokens?guest_chat_password=bwZeigeZrNwHExXas6yUka1N&answerer_id=4
</code></pre>

Ответ:

<pre><code class="ruby">
{
  "asker_type": "guest_chat_login",
  "asker_value": "75dNkYgRShvD72XYD98dg1Jb",
  "answerer_id": "4",
  "secret_chat_token": "0e23c9d0e61796d00b4e9866588347eb2e8a8af5"
}
</code></pre>

Параметр guest_chat_password должен соответствовать существующему в БД гостевому чат-токену. Если это не так, возвращается ошибка. Почему в запросе посылается гость-чат-пароль, а не гость-чат-логин? Просто это единственный способ удостоверить личность гостя, потому что только сам гость знает свой гость-чат-пароль и больше никто (а его гость-чат-логин знают все).

Возвращаемый секретный чат-токен является параметризованным, т.е. он "завязан" на пару "гость-чат-пароль + емейл юриста". Таким образом, гость может получить секретные чат-токены, завязанные только на пару "СВОЙ гость-чат-пароль + емейл любого юриста" - но он не может получить ни один секретный чат-токен, завязанный на произвольную пару "ЧУЖОЙ гость-чат-пароль + емейл любого юриста" (потому что он не знает чужие гость-чат-пароли) - и, как следствие, не сможет подслушать чужую чат-беседу. 

На сервере пара "гость-чат-пароль + емейл юриста" подписывается базовым серверным секретным ключом (secret_key_base из файла config/secrets.yml - аналогично механизму подписанных куков). Поэтому, чтобы сгенерировать желаемый секретный чат-токен, серверу нужно обязательно знать ОБЕ части пары "гость-чат-пароль + емейл юриста" - на этом и построена конфиденциальность (т.е. любой гость не знает чужие гость-чат-пароли).

Секретный токен в БД не записывается (нет необходимости, он всегда без проблем и однозначно генерируется "на лету").

9. Гость подключается к сокету:

<pre><code class="ruby">
ws://localhost:3000/cable/?guest_chat_login=75dNkYgRShvD72XYD98dg1Jb
</code></pre>

10. Подписывается (фронтэнд) на "приватный" (т.е. видимый лишь двоим) чат-канал, параметризованный секретным токеном ChatChannel#SecretToken:

<pre><code class="ruby">
{"command":"subscribe","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}"}
</code></pre>

11. Гость извещает юриста о том, что он хочет с ним початиться. Для этого он подписывается (фронтэнд) на "публичный" (т.е. видимый всем) канал чат-запросов, параметризованный по емейлу юриста (ChatChannel#Jurist), с которым гость хочет поговорить:

<pre><code class="ruby">
{"command":"subscribe","identifier":"{\"channel\":\"ChatChannel\",\"answerer_id\":\"4\"}"}
</code></pre>

При этом (в момент акта подписки) гость автоматически посылает сообщение @{chat_request: { asker_type: "guest_chat_login", asker_value: "75dNkYgRShvD72XYD98dg1Jb", chat_subscribed: :on }}@ на канал ChatChannel#Jurist:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"answerer_id\":\"4\"}","message":{"chat_request":{"asker_type":"guest_chat_login","asker_value":"75dNkYgRShvD72XYD98dg1Jb","chat_subscribed":"on"}}}
</code></pre>

Когда юрист получает (фронтэнд) на канале ChatChannel#Jurist сообщение @{chat_request: { asker_type: "guest_chat_login", asker_value: "75dNkYgRShvD72XYD98dg1Jb", chat_subscribed: :on }}@, то:

12. Юрист получает секретный токен чат-беседы (через HTTP-запрос серверу), обязательно указывая желаемого чат-собеседника:

<pre><code class="ruby">
POST http://localhost:3000/api/secret_chat_tokens?guest_chat_login=75dNkYgRShvD72XYD98dg1Jb
</code></pre>

Заголовки:
<pre><code class="ruby">
access-token: vgEiTjHgSVRyrxSot-P8tQ
client: XQW5Rqisvsn7S1yphgVSjw
uid: lawyer1@example.com
</code></pre>

На сервере отыскивается в БД гость-чат-пароль по предоставленному гость-чат-логину, генерируется секретный токен (по паре "емейл юриста" (из профиля) + гость-чат-пароль) и возвращается юристу:

Ответ:

<pre><code class="ruby">
{
  "asker_type": "guest_chat_login",
  "asker_value": "75dNkYgRShvD72XYD98dg1Jb",
  "answerer_id": "4",
  "secret_chat_token": "0e23c9d0e61796d00b4e9866588347eb2e8a8af5"
}
</code></pre>

Таким образом, гость-чат-пароль гостя-собеседника так и остаётся тайной для юриста (в этом HTTP-запросе и вообще как следствие).

Возвращаемый секретный чат-токен является параметризованным, т.е. он "завязан" на пару "гость-чат-пароль + собственный емейл юриста" (емейл, вытаскиваемый из профиля юриста). Таким образом, юрист может получить секретные чат-токены, завязанные только на пару "гость-чат-пароль любого пользователя + собственный емейл юриста" - но он не может получить ни один секретный чат-токен, завязанный на пару "гость-чат-пароль + емейл ДРУГОГО юриста" - и, как следствие, не сможет подслушать чужую чат-беседу. 

На сервере пара "гость-чат-пароль + емейл юриста" подписывается базовым серверным секретным ключом (secret_key_base из файла config/secrets.yml - аналогично механизму подписанных куков). Поэтому, чтобы сгенерировать желаемый секретный чат-токен, серверу нужно обязательно знать ОБЕ части пары "гость-чат-пароль + емейл юриста" - на этом и построена конфиденциальность (т.е. любой юрист с точки зрения сервера не знает емейл другого юриста и не может его подделать, т.к. регистрационные емейлы не меняются).

Почему нельзя завязать секретный чат-токен на гость-чат-логин вместо гость-чат-пароля? Потому что гость-чат-логин - публично известен всем желающим, а гость-чат-пароль знает только сам гость (его владелец) и сервер. Юрист же косвенно (через сервер и свой емейл из профиля как пароль доступа) использует гость-чат-пароль, чтобы подключиться к тому же каналу, куда уже гость подключился. Конфиденциальность канала общения сохранена.

Фактически, для установления конфиденциального канала связи, обе стороны общения должны каким-либо образом конфиденциально обменяться неким общим (для них двоих) секретным ключом. Именно это я и реализовал.

13. Юрист подписывается (фронтэнд) на "приватный" (т.е. видимый лишь двоим) чат-канал, параметризованный секретным токеном ChatChannel#SecretToken:

<pre><code class="ruby">
{"command":"subscribe","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}"}
</code></pre>

14. Юрист решает, согласен он початиться, или нет и посылает ответное сообщение ("да" или "нет") на канал ChatChannel#SecretToken:

<pre><code class="ruby">
{"command":"message","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","data":"{\"answerer_id\":\"4\",\"chat_request_accept\":\"true\",\"action\":\"process_accept_on_server\"}"}
</code></pre>

или (если не согласен)

<pre><code class="ruby">
{"command":"message","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","data":"{\"answerer_id\":\"4\",\"chat_request_accept\":\"false\",\"action\":\"process_accept_on_server\"}"}
</code></pre>

Почему юрист отвечает на ChatChannel#SecretToken, а не на ChatChannel#Jurist (что, казалось бы, логичней)? Потому что ChatChannel#Jurist - это публичный канал, а значит кто угодно может сфальсифицировать согласие или отказ юриста початиться с клиентом.

15. Гость, получив (на фронтэнде) согласие юриста початиться:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"answerer_id":"4","chat_request_accept":"true"}}
</code></pre>

может после этого слать чат-сообщения юристу и наоборот:

гость-юристу:

<pre><code class="ruby">
{"command":"message","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","data":"{\"text\":\"hi from guest\",\"action\":\"process_message_on_server\"}"}
</code></pre>

юрист-гостю:

<pre><code class="ruby">
{"command":"message","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","data":"{\"text\":\"hi from jurist\",\"action\":\"process_message_on_server\"}"}
</code></pre>

На стороне сервера автоматически распознаётся отправитель и получатель чат-сообщения, далее это чат-сообщение записывается в БД (в таблицу СhatMessage) одновременно по идентификатору отправителя (id юриста или гость-чат-пароль гостя) и по идентификатору получателя (id юриста или гость-чат-пароль гостя) и ретранслирует это сообщение (уже с автоматически корректно вставленными отправителем и получателем) обратно в канал ChatChannel#SecretToken - чтобы там это чат-сообщение смог прочесть адресат.

И никто посторонний не сможет подключиться к каналу ChatChannel#SecretToken (не зная SecretToken).

Получаемые сообщения (видны обеим сторонам, просто отправитель игнорирует свои же отправленные сообщения):

для юриста:
 
<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"sendable_type":"GuestChatToken","sendable_id":3,"receivable_type":"User","receivable_id":4,"text":"hi from guest"}}
</code></pre>

для гостя:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"sendable_type":"User","sendable_id":4,"receivable_type":"GuestChatToken","receivable_id":3,"text":"hi from jurist"}}
</code></pre>

16. Если гость уходит с сайта, то в момент его отключения он автоматически отправит через ChatChannel#SecretToken сообщение @{chat_cancel: { asker_type: "guest_chat_login", asker_value: "75dNkYgRShvD72XYD98dg1Jb", chat_subscribed: :off }}@:

юрист увидит:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"chat_cancel":{"asker_type":"guest_chat_login","asker_value":"75dNkYgRShvD72XYD98dg1Jb","chat_subscribed":"off"}}}
</code></pre>

Опять-таки, для этого не используется ChatRequestChannel#Jurist, чтобы никто не смог сфальсифицировать сообщение пользователя об отключении.

Юрист-собеседник получит это сообщение и отпишется от канала ChatChannel#SecretToken (потому что эта подписка утрачивает смысл - гость ушёл):

<pre><code class="ruby">
{"command":"unsubscribe","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}"}
</code></pre>

юрист увидит ответ:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"chat_cancel":{"asker_type":"answerer_id","asker_value":"4","chat_subscribed":"off"}}}
</code></pre>

Гость же, в момент отключения, автоматически отпишется от всех каналов.

Гость может сохранить гостевой пароль (например, в куках) и в другой раз прийти на сайт и получить свои старые чат-сообщения по HTTP-запросу к серверу - в этом запросе нужно указать емейл юриста и гость-чат-пароль гостя.

Если же гость в момент ухода в оффлайн был подписан на несколько разных ChatChannel#SecretToken (с разными SecretToken - т.е. на разных юристов-корреспондентов) - то тогда гость (в момент ухода в оффлайн) автоматически отправит соответствующее сообщение на каждый соответствующий канал ChatChannel#SecretToken правильным образом.

17. Если же юрист уходит из онлайна - то он также в момент своего отключения автоматически отправит через ChatChannel#SecretToken сообщение @{chat_cancel: { "asker_type":"answerer_id","asker_value":"4", chat_subscribed: :off }}@:

гость увидит:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"chat_cancel":{"asker_type":"answerer_id","asker_value":"4","chat_subscribed":"off"}}}
</code></pre>

Это полезно для случая, когда юрист уходит из онлайна (и из подписанного на ChatChannel#SecretToken состояния одновременно), а гость остаётся. В этом случае уже гость должен будет отписаться (фронтэнд) от ChatChannel#SecretToken:

<pre><code class="ruby">
{"command":"unsubscribe","identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}"}
</code></pre>

Ответ:

<pre><code class="ruby">
{"identifier":"{\"channel\":\"ChatChannel\",\"secret_chat_token\":\"0e23c9d0e61796d00b4e9866588347eb2e8a8af5\"}","message":{"chat_cancel":{"asker_type":"guest_chat_login","asker_value":"75dNkYgRShvD72XYD98dg1Jb","chat_subscribed":"off"}}}
</code></pre>

Когда пользователь уходит в оффлайн, сообщение о этом фактически дублируется: на AppearanceChannel и на ChatChannel#SecretToken. Это сделано просто для удобства.

На канале AppearanceChannel отслеживается только онлайн-статус пользователей, а не гостей. Потому что гостей сайта слишком много. Гости информируют о том, что они онлайн (на канале ChatRequestChannel#Jurist), только когда они хотят початиться - чтобы хоть как-то сократить поток сообщений об онлайн-статусе гостей сайта. Причём гости информируют о своём онлайн-статусе только одного пользователя - того юриста, с которым они хотят початиться.

Поэтому, когда гость уходит в оффлайн - то такого дублирования (сообщений о его уходе) не происходит.

Зачем вообще посылаются сообщения об уходе в оффлайн? Чтобы другая сторона чат-беседы узнала, что чатиться больше не с кем, и приняла соответствующие меры.

Что будет, если кто-нибудь подделает сообщение @{chat_request: { asker_type: "guest_chat_login", asker_value: "75dNkYgRShvD72XYD98dg1Jb", chat_subscribed: :on }}@ и отправит его на ChatRequestChannel#Jurist? Ничего страшного не случится - юрист подпишется на ChatChannel#SecretToken и начнёт ожидать поступления по нему несуществующих сообщений. И у юриста подписка на ChatChannel#SecretToken будет висеть "вечно" - вот и весь ущерб. Можно в будущем предусмотреть какой-нибудь таймаут "неактивной" подписки.